#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -----------------------------------------------------------
# CPE format caching into Redis, preserving raw vendor/product
# exactly as in the CPE without any normalization or unescaping.
# -----------------------------------------------------------

import logging
import sys
import time
from datetime import timedelta

from tqdm import tqdm

from lib.Config import Configuration
from lib.DatabaseLayer import getCPEs
from lib.cpe_conversion import split_cpe_name


class CPERedisBrowser(object):
    def __init__(self, cpes=None):
        try:
            self.__db = Configuration.getRedisVendorConnection()
        except Exception:
            sys.exit(1)

        if cpes is None:
            self.cpes = getCPEs()
        else:
            self.cpes = cpes

        self.set_debug_logging = False
        self.logger = logging.getLogger("CPERedisBrowser")

    def update(self):
        self.logger.info("Redis CPE database update started")
        start_time = time.time()

        for e in tqdm(self.cpes, desc="Inserting CPE's in redis"):
            raw = e.get("cpeName")
            parts = split_cpe_name(raw)
            # split_cpe_name preserves all escapes and punctuation
            prefix, version, cpetype, vendor, product = parts[:5]
            remainder = parts[5:]
            version_suffix = ":".join(remainder) if remainder else ""

            # store raw vendor and product strings without any normalization
            self.__db.sadd("prefix:" + prefix, cpetype)
            self.__db.sadd(cpetype, vendor)
            self.__db.sadd("v:" + vendor, product)
            if version_suffix:
                self.__db.sadd("p:" + product, version_suffix)

        self.logger.info(
            "Duration: {}".format(timedelta(seconds=time.time() - start_time))
        )
