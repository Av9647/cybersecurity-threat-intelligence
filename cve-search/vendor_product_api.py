#!/usr/bin/env python3
"""
Fast vendor-product CVE search API.
Expects that build_mapping.py has created
  • map_vendor_product_nvd
  • map_vendor_product_cvelistv5
inside the same Mongo database.
"""
import os
from typing import List, Dict

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pymongo import MongoClient

# --------------------------------------------------------------------------- #
# 1)  Config via env vars (defaults match docker-compose.yml)
# --------------------------------------------------------------------------- #
MONGO_URI        = os.getenv("MONGO_URI", "mongodb://mongo:27017/")
DB_NAME          = os.getenv("DB_NAME", "cvedb")
NVD_COLL         = os.getenv("NVD_COLL", "cves")
CVELIST_COLL     = os.getenv("CVELIST_COLL", "cvelistv5")
MAP_NVD_COLL     = os.getenv("MAP_NVD_COLL", "map_vendor_product_nvd")
MAP_CVELIST_COLL = os.getenv("MAP_CVELIST_COLL",
                             "map_vendor_product_cvelistv5")
PORT             = int(os.getenv("API_PORT", 8000))

# --------------------------------------------------------------------------- #
# 2)  FastAPI setup
# --------------------------------------------------------------------------- #
app = FastAPI(title="Vendor·Product CVE Lookup (fast)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["GET"],
    allow_headers=["*"],
)

# --------------------------------------------------------------------------- #
# 3)  Mongo connections
# --------------------------------------------------------------------------- #
client           = MongoClient(MONGO_URI)
db               = client[DB_NAME]
nvd_col          = db[NVD_COLL]
cvelist_col      = db[CVELIST_COLL]
map_nvd_col      = db[MAP_NVD_COLL]
map_cvelist_col  = db[MAP_CVELIST_COLL]

# --------------------------------------------------------------------------- #
# 4)  Helper: fetch CVE IDs from a map document
# --------------------------------------------------------------------------- #
def list_cves(map_collection, vendor: str, product: str) -> List[str]:
    """
    Return the list of CVE IDs for (vendor, product) from the given
    mapping collection, or [] if no mapping document exists.
    """
    doc: Dict = map_collection.find_one(
        {"_id.vendor": vendor, "_id.product": product},
        {"_id": 0, "cves": 1},
    )
    return doc.get("cves", []) if doc else []

# --------------------------------------------------------------------------- #
# 5)  Endpoint compatible with CIRCL /api/search/{vendor}/{product}
# --------------------------------------------------------------------------- #
@app.get("/api/search/{vendor}/{product}")
async def fast_lookup(vendor: str, product: str):
    # 1) get the CVE ID lists from both maps
    nvd_ids  = list_cves(map_nvd_col,      vendor, product)
    cl_ids   = list_cves(map_cvelist_col,  vendor, product)

    # 2) fetch the full docs in one indexed $in query per source
    nvd_docs = list(nvd_col.find({"id": {"$in": nvd_ids}}))               if nvd_ids else []
    cl_docs  = list(cvelist_col.find({"cveMetadata.cveId": {"$in": cl_ids}})) if cl_ids else []

    if not nvd_docs and not cl_docs:
        raise HTTPException(status_code=404,
                            detail=f"No CVEs for {vendor}/{product}")

    # 3) keep CIRCL’s response shape
    return {"cvelistv5": cl_docs, "fkie_nvd": nvd_docs}

# --------------------------------------------------------------------------- #
# 6)  Uvicorn entry-point
# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("vendor_product_api:app", host="0.0.0.0",
                port=PORT, reload=True)
