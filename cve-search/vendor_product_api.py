#!/usr/bin/env python3
"""
Fast vendor-product CVE lookup API, with browse endpoints.
Expects that build_mapping.py has created
  • map_vendor_product_nvd
  • map_vendor_product_cvelistv5
inside the same Mongo database.
"""
import os
from typing import List

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pymongo import MongoClient

# ---------------------------------------------------------------------------- #
# 1)  Config via env vars (defaults match docker-compose.yml)
# ---------------------------------------------------------------------------- #
MONGO_URI        = os.getenv("MONGO_URI", "mongodb://mongo:27017/")
DB_NAME          = os.getenv("DB_NAME",   "cvedb")
NVD_COLL         = os.getenv("NVD_COLL",  "cves")
CVELIST_COLL     = os.getenv("CVELIST_COLL", "cvelistv5")
MAP_NVD_COLL     = os.getenv("MAP_NVD_COLL",   "map_vendor_product_nvd")
MAP_CVELIST_COLL = os.getenv("MAP_CVELIST_COLL","map_vendor_product_cvelistv5")
PORT             = int(os.getenv("API_PORT", 8000))

# ---------------------------------------------------------------------------- #
# 2)  FastAPI setup
# ---------------------------------------------------------------------------- #
app = FastAPI(title="Vendor·Product CVE Lookup (fast)")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["GET"],
    allow_headers=["*"],
)

# ---------------------------------------------------------------------------- #
# 3)  Mongo connections
# ---------------------------------------------------------------------------- #
client          = MongoClient(MONGO_URI)
db              = client[DB_NAME]
nvd_col         = db[NVD_COLL]
cvelist_col     = db[CVELIST_COLL]
map_nvd_col     = db[MAP_NVD_COLL]
map_cvelist_col = db[MAP_CVELIST_COLL]

# ---------------------------------------------------------------------------- #
# 4)  Helpers
# ---------------------------------------------------------------------------- #
def list_cves(map_collection, vendor: str, product: str) -> List[str]:
    doc = map_collection.find_one(
        {"_id.vendor": vendor, "_id.product": product},
        {"_id": 0, "cves": 1}
    )
    return doc.get("cves", []) if doc else []

# ---------------------------------------------------------------------------- #
# 5)  Browse: all vendors
# ---------------------------------------------------------------------------- #
@app.get("/api/browse", response_model=List[str])
async def browse_vendors():
    # union of both maps
    v1 = map_nvd_col.distinct("_id.vendor")
    v2 = map_cvelist_col.distinct("_id.vendor")
    vendors = sorted({v for v in (v1 + v2) if v is not None})
    return vendors

# ---------------------------------------------------------------------------- #
# 6)  Browse: products by vendor
# ---------------------------------------------------------------------------- #
@app.get("/api/browse/{vendor}", response_model=List[str])
async def browse_products(vendor: str):
    p1 = map_nvd_col.distinct("_id.product", {"_id.vendor": vendor})
    p2 = map_cvelist_col.distinct("_id.product", {"_id.vendor": vendor})
    products = sorted({p for p in (p1 + p2) if p is not None})
    if not products:
        raise HTTPException(
            status_code=404,
            detail=f"No products found for vendor '{vendor}'"
        )
    return products

# ---------------------------------------------------------------------------- #
# 7)  Search CVEs by vendor+product (CIRCL-compatible shape)
# ---------------------------------------------------------------------------- #
@app.get("/api/search/{vendor}/{product}")
async def fast_lookup(vendor: str, product: str):
    nvd_ids = list_cves(map_nvd_col, vendor, product)
    cl_ids  = list_cves(map_cvelist_col, vendor, product)

    nvd_out = []
    if nvd_ids:
        nvd_raw = list(
            nvd_col.find({"id": {"$in": nvd_ids}}, {"_id": 0})
        )
        nvd_map = {doc["id"]: doc for doc in nvd_raw}
        nvd_out = [[cve, nvd_map[cve]] for cve in nvd_ids if cve in nvd_map]

    cl_out = []
    if cl_ids:
        cl_raw = list(
            cvelist_col.find(
                {"cveMetadata.cveId": {"$in": cl_ids}},
                {"_id": 0}
            )
        )
        cl_map = {doc["cveMetadata"]["cveId"]: doc for doc in cl_raw}
        cl_out = [[cve, cl_map[cve]] for cve in cl_ids if cve in cl_map]

    if not (nvd_out or cl_out):
        raise HTTPException(
            status_code=404,
            detail=f"No CVEs for {vendor}/{product}"
        )

    return {"fkie_nvd": nvd_out, "cvelistv5": cl_out}

# ---------------------------------------------------------------------------- #
# 8)  Retrieve specific CVE details
# ---------------------------------------------------------------------------- #
@app.get("/api/cve/{cve_id}")
async def get_cve(cve_id: str):
    # Try CVE-ListV5 first
    cl = cvelist_col.find_one(
        {"cveMetadata.cveId": cve_id},
        {"_id": 0}
    )
    if cl:
        return cl

    # Fallback to NVD
    nvd = nvd_col.find_one(
        {"id": cve_id},
        {"_id": 0}
    )
    if nvd:
        return nvd

    raise HTTPException(
        status_code=404,
        detail=f"CVE '{cve_id}' not found"
    )

# ---------------------------------------------------------------------------- #
# 9)  Uvicorn entry-point
# ---------------------------------------------------------------------------- #
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "vendor_product_api:app",
        host="0.0.0.0",
        port=PORT,
        reload=True
    )
