#!/usr/bin/env python3
"""
Diff the two most recent builds of BOTH map_vendor_product_nvd
and map_vendor_product_cvelistv5, then send changed vendor/product
pairs to SQS as {"vendor":..., "product":...}.
"""
import os
import json
from pymongo import MongoClient
import boto3

# config from env
MONGO_URI = os.getenv("MONGO_URI", "mongodb://mongo:27017/")
DB_NAME   = os.getenv("DB_NAME", "cvedb")
QUEUE_URL = os.getenv("DELTA_QUEUE_URL")  # must be set

# constants
MAP_NVD     = "map_vendor_product_nvd"
MAP_CVELIST = "map_vendor_product_cvelistv5"
META_COLL   = "map_build_meta"

# connect
client = MongoClient(MONGO_URI)
db     = client[DB_NAME]
sqs    = boto3.client("sqs")

# fetch the two most recent timestamps for each map
def last_two_ts(collection_name):
    docs = list(db[META_COLL]
                .find({"collection": collection_name})
                .sort("ts", -1)
                .limit(2))
    if len(docs) < 2:
        raise RuntimeError(f"Need ≥2 builds for '{collection_name}'")
    return docs[0]["ts"], docs[1]["ts"]

new_nvd_ts, prev_nvd_ts       = last_two_ts("nvd_ts")
new_cl_ts,  prev_cl_ts        = last_two_ts("cvelistv5_ts")

print(f"Diffing NVD map: {prev_nvd_ts} → {new_nvd_ts}")
print(f"Diffing CVE-List map: {prev_cl_ts} → {new_cl_ts}")

pipeline = [
    # start with docs from either new build
    {"$unionWith": {
        "coll": MAP_CVELIST,
        "pipeline": [
            {"$match": {"_build_ts": new_cl_ts}}
        ]
    }},
    {"$match": {"_build_ts": {"$in": [new_nvd_ts, new_cl_ts]}}},
    # lookup old NVD list
    {"$lookup": {
        "from": MAP_NVD,
        "let": {"id": "$_id"},
        "pipeline": [
            {"$match": {"_build_ts": prev_nvd_ts}},
            {"$match": {"$expr": {"$eq": ["$_id", "$$id"]}}},
            {"$project": {"cves": 1}}
        ],
        "as": "old_nvd"
    }},
    # lookup old CVE-List list
    {"$lookup": {
        "from": MAP_CVELIST,
        "let": {"id": "$_id"},
        "pipeline": [
            {"$match": {"_build_ts": prev_cl_ts}},
            {"$match": {"$expr": {"$eq": ["$_id", "$$id"]}}},
            {"$project": {"cves": 1}}
        ],
        "as": "old_cl"
    }},
    # keep docs where either list changed
    {"$match": {"$expr": {
        "$or": [
            # NVD changed?
            {"$gt": [
                {"$size": {
                    "$setDifference": [
                        "$cves",
                        {"$arrayElemAt": ["$old_nvd.cves", 0]}
                    ]
                }},
                0
            ]},
            # CVE-List changed?
            {"$gt": [
                {"$size": {
                    "$setDifference": [
                        "$cves",
                        {"$arrayElemAt": ["$old_cl.cves", 0]}
                    ]
                }},
                0
            ]}
        ]
    }}},
    {"$project": {"_id": 1}}
]

seen = set()
for doc in db[MAP_NVD].aggregate(pipeline, allowDiskUse=True):
    v = doc["_id"]["vendor"]
    p = doc["_id"]["product"]
    if (v,p) in seen:
        continue
    seen.add((v,p))
    body = json.dumps({"vendor": v, "product": p})
    sqs.send_message(QueueUrl=QUEUE_URL, MessageBody=body)

print("✔ Diff complete; sent", len(seen), "messages to SQS.")
