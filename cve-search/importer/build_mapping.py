#!/usr/bin/env python3
"""
1) Build the NVD and CVE-List→vendor/product maps.
2) Tag every map doc with a UTC timestamp (_build_ts).
3) Record each build in map_build_meta.
"""
from datetime import datetime, timezone
from pymongo import MongoClient

DB_NAME       = "cvedb"
NVD_COLL      = "cves"
CVELIST_COLL  = "cvelistv5"
MAP_NVD       = "map_vendor_product_nvd"
MAP_CVELIST   = "map_vendor_product_cvelistv5"
META_COLL     = "map_build_meta"

client = MongoClient("mongodb://mongo:27017/")
db     = client[DB_NAME]

# 0) this run’s timestamp
ts = datetime.now(timezone.utc)

# 1) drop old maps
db[MAP_NVD].drop()
db[MAP_CVELIST].drop()

# 2) Build NVD → vendor/product map
print("Building map_vendor_product_nvd…")
pipeline_nvd = [
    {"$unwind": "$configurations.nodes"},
    {"$unwind": "$configurations.nodes.cpe_match"},
    {"$project": {
        "cve": "$cveMetadata.cveId",
        "cpe": "$configurations.nodes.cpe_match.criteria"
    }},
    {"$project": {
        "cve": 1,
        "vendor":  {"$arrayElemAt":[{"$split":["$cpe",":"]},3]},
        "product": {"$arrayElemAt":[{"$split":["$cpe",":"]},4]}
    }},
    {"$group":{
        "_id": {"vendor":"$vendor","product":"$product"},
        "cves": {"$addToSet":"$cve"}
    }},
    {"$merge":{
        "into": MAP_NVD,
        "on":   "_id",
        "whenMatched":"replace",
        "whenNotMatched":"insert"
    }}
]
db[NVD_COLL].aggregate(pipeline_nvd, allowDiskUse=True)
count_nvd = db[MAP_NVD].count_documents({})
print(" →", count_nvd, "entries")

# 3) Tag & meta for NVD map
db[MAP_NVD].update_many({}, {"$set": {"_build_ts": ts}})
db[META_COLL].insert_one({
    "collection": "nvd_ts",
    "ts": ts,
    "count": count_nvd
})

# 4) Build Official List → vendor/product map
print("Building map_vendor_product_cvelistv5…")
pipeline_cl = [
    {"$unwind": "$containers.cna.affected"},
    {"$group": {
        "_id": {
            "vendor":  "$containers.cna.affected.vendor",
            "product": "$containers.cna.affected.product"
        },
        "cves": {"$addToSet":"$cveMetadata.cveId"}
    }},
    {"$merge":{
        "into": MAP_CVELIST,
        "on":   "_id",
        "whenMatched":"replace",
        "whenNotMatched":"insert"
    }}
]
db[CVELIST_COLL].aggregate(pipeline_cl, allowDiskUse=True)
count_cl = db[MAP_CVELIST].count_documents({})
print(" →", count_cl, "entries")

# 5) Tag & meta for CVE-List map
db[MAP_CVELIST].update_many({}, {"$set": {"_build_ts": ts}})
db[META_COLL].insert_one({
    "collection": "cvelistv5_ts",
    "ts": ts,
    "count": count_cl
})

# 6) Recreate our MImap indexes so diff_maps remains fast
print("Creating indexes…")
db[MAP_NVD].create_index([("_build_ts", 1)], name="idx_nvd_build_ts")
db[MAP_NVD].create_index([("_build_ts", 1), ("_id", 1)], name="idx_nvd_build_ts__id")
db[MAP_CVELIST].create_index([("_build_ts", 1)], name="idx_clv5_build_ts")
db[MAP_CVELIST].create_index([("_build_ts", 1), ("_id", 1)], name="idx_clv5_build_ts__id")
db[META_COLL].create_index([("collection", 1), ("ts", -1)], name="idx_meta_collection_ts")

print("Map builds complete at", ts.isoformat())
